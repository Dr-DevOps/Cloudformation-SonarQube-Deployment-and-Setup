AWSTemplateFormatVersion: 2010-09-09
Description: SonarQube

Parameters:
  Keyname:
    Type: AWS::EC2::KeyPair::KeyName
    Default: YourSSHKeyName
  AMI:
    Type: String
    Default: ami-0ac43988dfd31ab9a 
  InstanceSize:
    Type: String
    Default: t2.medium
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: VPCID

  Subnets:
    Type: CommaDelimitedList
    Default: subnetID1,subnetID2
  Subnet:
    Type: String
    Default: subnetID1
Resources:

  SonarSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow access to Sonar by everyone."
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: !Join [ ":", [ !Ref "AWS::StackName", sg-incoming-sonar ] ]
      VpcId: !Ref VpcId

  SonarServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceSize
      KeyName: !Ref Keyname
    
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 25
            VolumeType: gp3
      
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SonarSecurityGroup
          SubnetId: !Ref Subnet
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex

          yum update -y
          yum install -y java-11-amazon-corretto wget unzip vim awscli jq

          PKG=sonarqube-8.7.0.41497
          wget https://binaries.sonarsource.com/Distribution/sonarqube/$PKG.zip

          mkdir /opt/sonar
          mkdir -p /opt/sonar/data
          mkdir -p /opt/sonar/temp

          unzip $PKG.zip -d /opt/sonar
          ln -s /opt/sonar/$PKG /opt/sonar/latest

          useradd sonar
          chown sonar:sonar /opt/sonar/ -R

          USER="sonaradmin"
          PASS="database#123"

          echo "sonar.jdbc.username=$USER" >> /opt/sonar/latest/conf/sonar.properties
          echo "sonar.jdbc.password=$PASS" >> /opt/sonar/latest/conf/sonar.properties
          echo "sonar.jdbc.url=jdbc:postgresql://${RDSCluster.Endpoint.Address}/sonardb" >> /opt/sonar/latest/conf/sonar.properties
          

          sysctl -w vm.max_map_count=524288
          sysctl -w fs.file-max=131072

          cat << EOF > /etc/sysctl.d/99-sonarqube.conf
          vm.max_map_count=524288
          fs.file-max=131072
          EOF

          JAR=`find /opt/sonar/latest/lib/ -name sonar-application-*.jar`

          cat << EOF > /etc/systemd/system/sonarqube.service
            [Unit]
            Description=SonarQube service
            After=syslog.target network.target

            [Service]
            Type=simple
            User=sonar
            Group=sonar
            PermissionsStartOnly=true
            ExecStart=/bin/nohup java -Xms32m -Xmx32m -Djava.net.preferIPv4Stack=true -jar $JAR
            StandardOutput=syslog
            LimitNOFILE=131072
            LimitNPROC=8192
            TimeoutStartSec=5
            Restart=always
            SuccessExitStatus=143

            [Install]
            WantedBy=multi-user.target
          EOF
          
          systemctl enable sonarqube
          systemctl start sonarqube

  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB Server Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref SonarSecurityGroup
  
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Group of subnets for SQL database cluster
      DBSubnetGroupName: "sonar subnet group"
      SubnetIds: !Ref Subnets

  RDSCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      MasterUsername: "sonaradmin"
      MasterUserPassword: "database#123"
      DBClusterIdentifier: "sonardb"
      Engine: aurora-postgresql
      EngineMode: provisioned
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBClusterParameterGroupName: default.aurora-postgresql11
      Port: 5432
      DatabaseName: "sonardb"
      VpcSecurityGroupIds:
        - !Ref DBSG

  RDSDBInstance1:
    Properties:
     
      DBClusterIdentifier:
        Ref: RDSCluster
      DBInstanceClass: db.t3.medium
      DBParameterGroupName: default.aurora-postgresql11
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      Engine: aurora-postgresql
      PubliclyAccessible: "false"
    Type: "AWS::RDS::DBInstance"
